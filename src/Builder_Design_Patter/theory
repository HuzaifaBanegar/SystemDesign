The Builder Design Pattern is a creational design pattern that allows for constructing complex objects step-by-step.
Unlike other patterns where a single method is used to create an object, the Builder Pattern provides a more controlled and flexible way to construct objects, particularly when an object has multiple optional parameters or configurations.

Key Components
-Builder Interface: Defines the methods for creating different parts of the product.
-Concrete Builder: Implements the builder interface to construct and assemble parts of the product.
-Product: The complex object that is constructed. It is typically a class with multiple attributes that can be set using the builder.
-Director: (Optional) Responsible for controlling the construction process. It can use the builder to create the product in a particular order.
-Client: Uses the builder to construct the product.

Benefits
-Separation of Construction and Representation: The same construction process can create different representations.
-Immutable Objects: Helps in creating immutable objects by ensuring that all parameters are set before the object is created.
-Readability: Code becomes more readable and easier to understand, especially when creating objects with many parameters.

All modifications:

-> First Iteration:
1. All the attributes in seperate Builder class as Students class
2. Simply create a Builder object in Client.main method and set all the required attributes.
3. Create a Student object and pass the Builder object inside it.
4. The validations are mentioned in Student constructor and after passing it, The Students object is created


-> Second Iteration:
1. Instead of creating Builder method manually outside, we created getBuilder method inside the Student class.
    But since we need to call this method before creating Student, we made it static
2. Then we created build method in Builder class (initially created seperate), and did validation there
3. After passing validations, we returned new Student(this) , that is passed the Builder object inside student and invoked it.

But, the problem is anyone can create student object without going through Builder class.
Hence we make it private in next iteration

-> Third Iteration:
1. We made Student constructor private.
2. Since it cannot be accessed in build() method of Builder class anymore, we moved Builder class into Student class
    We made Builder class as Inner class to Student, as its usage was only to make Student class.
3. By doing that, since getBuilder() method is static , we made Builder class as static too.
4. Now inside the client.main() method:
    - We created Student student = Student.getBuilder(), which created a Builder class before creating Student object
    - Then chained the setter methods, like setName(), setAge() together to it.
    - Since we are chaining them, we need to have a return type of these setter methods to Builder and inside after setting them, just return this.
    - After all setting, we just call build() methods that creates the Student object
    - This build will now have the validations, so that the validations are passed even before creating Student object.

When to Use the Builder Pattern
When an object needs to be created with many optional parameters or requires extensive setup.
When you want to construct objects in a step-by-step manner.
When you want to create immutable objects.
Conclusion
The Builder Design Pattern enhances the flexibility and readability of object creation, especially for complex objects that might have multiple configurations.
It is a widely used pattern in Java for scenarios involving object creation where clarity and code maintenance are crucial.

